<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 编程 | My Octopress Blog]]></title>
  <link href="http://lhyqy5.github.com/blog/categories/code/atom.xml" rel="self"/>
  <link href="http://lhyqy5.github.com/"/>
  <updated>2012-09-24T07:44:00+08:00</updated>
  <id>http://lhyqy5.github.com/</id>
  <author>
    <name><![CDATA[lhyqy5]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[位运算相关]]></title>
    <link href="http://lhyqy5.github.com/blog/2012/06/12/commont-note/"/>
    <updated>2012-06-12T10:50:00+08:00</updated>
    <id>http://lhyqy5.github.com/blog/2012/06/12/commont-note</id>
    <content type="html"><![CDATA[<h3>位运算应用口诀</h3>

<blockquote><p>清零取反要用与，某位置一可用或</p>

<p>若要取反和交换，轻轻松松用异或</p></blockquote>

<h3>移位运算</h3>

<h4>要点</h4>

<ol>
<li>它们都是双目运算符，两个运算分量都是整形，结果也是整形。</li>
<li>" &lt; &lt;" 左移：右边空出的位上补0，左边的位将从字头挤掉，其值相当于乘2。</li>
<li>">>"右移：右边的位被挤掉。对于左边移出的空位，如果是正数则空位补0，若为负数，可能补0或补1，这取决于所用的计算机系统。</li>
<li>">>>"运算符，右边的位被挤掉，对于左边移出的空位一概补上0。</li>
</ol>


<h3>位运算符的应用 (源操作数s 掩码mask)</h3>

<h4>按位与-- <code>&amp;</code></h4>

<ol>
<li>清零特定位 (mask中特定位置0，其它位为1，<code>s=s&amp;mask</code>)</li>
<li>取某数中指定位 (mask中特定位置1，其它位为0，<code>s=s&amp;mask</code>)</li>
</ol>


<h4>按位或-- <code>|</code></h4>

<p>常用来将源操作数某些位置1，其它位不变。 (mask中特定位置1，其它位为0 <code>s=s |mask</code>)</p>

<h4>位异或-- <code>^</code></h4>

<ol>
<li>使特定位的值取反 (mask中特定位置1，其它位为0 <code>s=s^mask</code>)</li>
<li>不引入第三变量，交换两个变量的值 (设 <code>a=a1,b=b1</code>)</li>
</ol>


<table>
<thead>
<tr>
<th align="center">目 标 </th>
<th align="center"> 操 作 </th>
<th align="center"> 操作后状态 </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><code>a=a1^b1</code> </td>
<td align="center"><code>a=a^b</code> </td>
<td align="center"> <code>a=a1^b1,b=b1</code> </td>
</tr>
<tr>
<td align="center"><code>b=a1^b1^b1</code> </td>
<td align="center"> <code>b=a^b</code> </td>
<td align="center"> <code>a=a1^b1,b=a1</code> </td>
</tr>
<tr>
<td align="center"><code>a=b1^a1^a1</code> </td>
<td align="center"> <code>a=a^b</code> </td>
<td align="center"> <code>a=b1,b=a1</code> </td>
</tr>
</tbody>
</table>


<!-- more -->


<h3>二进制补码运算公式：</h3>

<p><code>cpp
-x = ~x + 1 = ~(x-1)
~x = -x-1
-(~x) = x+1
~(-x) = x-1
x+y = x - ~y - 1 = (x |y)+(x&amp;y)
x-y = x + ~y + 1 = (x |~y)-(~x&amp;y)
x^y = (x |y)-(x&amp;y)
x |y = (x&amp;~y)+y
x&amp;y = (~x |y)-~x
x==y:    ~(x-y |y-x)
x!=y:    x-y |y-x
x &lt; y:    (x-y)^((x^y)&amp;((x-y)^x))
x &lt;=y:    (x |~y)&amp;((x^y) |~(y-x))
x &lt; y:    (~x&amp;y) |((~x |y)&amp;(x-y))//无符号x,y比较
x &lt;=y:    (~x |y)&amp;((x^y) |~(y-x))//无符号x,y比较
</code></p>

<h3>应用举例</h3>

<ul>
<li>判断int型变量a是奇数还是偶数
  <em>a&amp;1  = 0 偶数</em>
  <em>a&amp;1 =  1 奇数</em></li>
<li>取int型变量a的第k位 (k=0,1,2……sizeof(int))，即a>>k&amp;1</li>
<li>将int型变量a的第k位清0，即a=a&amp;~(1 &lt; &lt;k)</li>
<li>将int型变量a的第k位置1， 即a=a |(1 &lt; &lt;k)</li>
<li>int型变量循环左移k次，即a=a &lt; <k |a>>16-k  (设sizeof(int)=16)</li>
<li>int型变量a循环右移k次，即a=a>>k |a &lt; &lt;16-k  (设sizeof(int)=16)</li>
<li>整数的平均值</li>
<li>对于两个整数x,y，如果用 (x+y)/2 求平均值，会产生溢出，因为 x+y 可能会大于INT_MAX，但是我们知道它们的平均值是肯定不会溢出的，我们用如下算法：</li>
</ul>


<p>``` cpp
int average(int x, int y)  //返回X,Y 的平均值
{</p>

<pre><code>return (x&amp;y)+((x^y)&gt;&gt;1); 
</code></pre>

<p>}
```</p>

<ul>
<li>判断一个整数是不是2的幂,对于一个数 x >= 0，判断他是不是2的幂</li>
</ul>


<p>``` cpp
boolean power2(int x)
{</p>

<pre><code>return ((x&amp;(x-1))==0)&amp;&amp;(x!=0)； 
</code></pre>

<p>}
```
* 不用temp交换两个整数</p>

<p>``` cpp
void swcap(int x , int y)
{</p>

<pre><code>x ^= y; 
y ^= x; 
x ^= y; 
</code></pre>

<p>}
<code>
* 计算绝对值
</code> cpp
int abs( int x )
{</p>

<pre><code>int y ; 
y = x &gt;&gt; 31 ; 
return (x^y)-y ;        //or: (x+y)^y 
</code></pre>

<p>}
```</p>

<ul>
<li>取模运算转化成位运算 (在不产生溢出的情况下)

<pre><code>  a % (2^n) 等价于 a &amp; (2^n - 1)
</code></pre></li>
<li>乘法运算转化成位运算 (在不产生溢出的情况下)

<pre><code>  a * (2^n) 等价于 a &lt; &lt; n
</code></pre></li>
<li>除法运算转化成位运算 (在不产生溢出的情况下)

<pre><code>  a / (2^n) 等价于 a&gt;&gt; n
  例: 12/8 == 12&gt;&gt;3 
</code></pre></li>
<li><code>a % 2</code> 等价于 <code>a &amp; 1</code></li>
<li><code>x= a ^ b ^ x;</code> 等价于

<pre><code>  if (x == a) x= b; 
  else x= a;
</code></pre></li>
<li>x 的 相反数 表示为 (~x+1)</li>
</ul>


<h3>实例</h3>

<table>
<thead>
<tr>
<th align="center">功能 </th>
<th align="center"> 示例  </th>
<th align="center"> 位运算 </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">去掉最后一位      </td>
<td align="center"> (101101->10110)          </td>
<td align="center"> x >> 1 </td>
</tr>
<tr>
<td align="center">在最后加一个0        </td>
<td align="center"> (101101->1011010)        </td>
<td align="center"> x &lt; &lt; 1 </td>
</tr>
<tr>
<td align="center">在最后加一个1        </td>
<td align="center"> (101101->1011011)        </td>
<td align="center"> x &lt; &lt; 1+1 </td>
</tr>
<tr>
<td align="center">把最后一位变成1      </td>
<td align="center"> (101100->101101)          </td>
<td align="center"> x | 1 </td>
</tr>
<tr>
<td align="center">把最后一位变成0      </td>
<td align="center"> (101101->101100)          </td>
<td align="center"> x | 1-1 </td>
</tr>
<tr>
<td align="center">最后一位取反          </td>
<td align="center"> (101101->101100)          </td>
<td align="center"> x ^ 1 </td>
</tr>
<tr>
<td align="center">把右数第k位变成1      </td>
<td align="center"> (101001->101101,k=3)      </td>
<td align="center"> x | (1 &lt; &lt; (k-1)) </td>
</tr>
<tr>
<td align="center">把右数第k位变成0      </td>
<td align="center"> (101101->101001,k=3)      </td>
<td align="center"> x &amp; ~ (1 &lt; &lt; (k-1)) </td>
</tr>
<tr>
<td align="center">右数第k位取反        </td>
<td align="center"> (101001->101101,k=3)      </td>
<td align="center"> x ^ (1 &lt; &lt; (k-1)) </td>
</tr>
<tr>
<td align="center">取末三位              </td>
<td align="center"> (1101101->101)            </td>
<td align="center"> x &amp; 7 </td>
</tr>
<tr>
<td align="center">取末k位              </td>
<td align="center"> (1101101->1101,k=5)      </td>
<td align="center"> x &amp; ((1 &lt; &lt; k)-1) </td>
</tr>
<tr>
<td align="center">取右数第k位          </td>
<td align="center"> (1101101->1,k=4)          </td>
<td align="center"> x >> (k-1) &amp; 1 </td>
</tr>
<tr>
<td align="center">把末k位变成1          </td>
<td align="center"> (101001->101111,k=4)      </td>
<td align="center"> x | (1 &lt; &lt; k-1) </td>
</tr>
<tr>
<td align="center">末k位取反            </td>
<td align="center"> (101001->100110,k=4)      </td>
<td align="center"> x ^ (1 &lt; &lt; k-1) </td>
</tr>
<tr>
<td align="center">把右边连续的1变成0    </td>
<td align="center"> (100101111->100100000)    </td>
<td align="center"> x &amp; (x+1) </td>
</tr>
<tr>
<td align="center">把右起第一个0变成1    </td>
<td align="center"> (100101111->100111111)    </td>
<td align="center"> x | (x+1) </td>
</tr>
<tr>
<td align="center">把右边连续的0变成1    </td>
<td align="center"> (11011000->11011111)      </td>
<td align="center"> x | (x-1) </td>
</tr>
<tr>
<td align="center">取右边连续的1        </td>
<td align="center"> (100101111->1111)        </td>
<td align="center"> (x ^ (x+1)) >> 1 </td>
</tr>
<tr>
<td align="center">去掉右起第一个1的左边 </td>
<td align="center"> (100101000->1000)        </td>
<td align="center"> x &amp; (x ^ (x-1)) </td>
</tr>
</tbody>
</table>


<ul>
<li>判断奇数 (x&amp;1)==1</li>
<li><p>判断偶数 (x&amp;1)==0</p></li>
<li><p>例如求从x位（高）到y位（低）间共有多少个1*</p></li>
</ul>


<p>``` cpp
public static int FindChessNum(int x, int y, ushort k)
{</p>

<pre><code>int re = 0; 
for (int i = y; i &lt;= x; i++) 
{ 
    re += ((k &gt;&gt; (i - 1)) &amp; 1); 
} 
return re; 
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
</feed>
