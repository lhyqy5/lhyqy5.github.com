<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 笔记 | My Octopress Blog]]></title>
  <link href="http://lhyqy5.github.com/blog/categories/note/atom.xml" rel="self"/>
  <link href="http://lhyqy5.github.com/"/>
  <updated>2012-09-24T07:44:00+08:00</updated>
  <id>http://lhyqy5.github.com/</id>
  <author>
    <name><![CDATA[lhyqy5]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[批处理学习笔记]]></title>
    <link href="http://lhyqy5.github.com/blog/2012/07/03/bat-study/"/>
    <updated>2012-07-03T13:00:00+08:00</updated>
    <id>http://lhyqy5.github.com/blog/2012/07/03/bat-study</id>
    <content type="html"><![CDATA[<h3>常用路径变量   <a href="http://topic.csdn.net/u/20090828/06/e8dad992-1eb4-467f-81f4-8c74d77743b4.html">[原文]</a></h3>

<p><code>bat
@echo off
echo 当前盘符：%~d0
echo 当前盘符和路径：%~dp0
echo 当前批处理全路径：%~f0
echo 当前盘符和路径的短文件名格式：%~sdp0
echo 当前CMD默认目录：%cd%
pause
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[位运算相关]]></title>
    <link href="http://lhyqy5.github.com/blog/2012/06/12/commont-note/"/>
    <updated>2012-06-12T10:50:00+08:00</updated>
    <id>http://lhyqy5.github.com/blog/2012/06/12/commont-note</id>
    <content type="html"><![CDATA[<h3>位运算应用口诀</h3>

<blockquote><p>清零取反要用与，某位置一可用或</p>

<p>若要取反和交换，轻轻松松用异或</p></blockquote>

<h3>移位运算</h3>

<h4>要点</h4>

<ol>
<li>它们都是双目运算符，两个运算分量都是整形，结果也是整形。</li>
<li>" &lt; &lt;" 左移：右边空出的位上补0，左边的位将从字头挤掉，其值相当于乘2。</li>
<li>">>"右移：右边的位被挤掉。对于左边移出的空位，如果是正数则空位补0，若为负数，可能补0或补1，这取决于所用的计算机系统。</li>
<li>">>>"运算符，右边的位被挤掉，对于左边移出的空位一概补上0。</li>
</ol>


<h3>位运算符的应用 (源操作数s 掩码mask)</h3>

<h4>按位与-- <code>&amp;</code></h4>

<ol>
<li>清零特定位 (mask中特定位置0，其它位为1，<code>s=s&amp;mask</code>)</li>
<li>取某数中指定位 (mask中特定位置1，其它位为0，<code>s=s&amp;mask</code>)</li>
</ol>


<h4>按位或-- <code>|</code></h4>

<p>常用来将源操作数某些位置1，其它位不变。 (mask中特定位置1，其它位为0 <code>s=s |mask</code>)</p>

<h4>位异或-- <code>^</code></h4>

<ol>
<li>使特定位的值取反 (mask中特定位置1，其它位为0 <code>s=s^mask</code>)</li>
<li>不引入第三变量，交换两个变量的值 (设 <code>a=a1,b=b1</code>)</li>
</ol>


<table>
<thead>
<tr>
<th align="center">目 标 </th>
<th align="center"> 操 作 </th>
<th align="center"> 操作后状态 </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center"><code>a=a1^b1</code> </td>
<td align="center"><code>a=a^b</code> </td>
<td align="center"> <code>a=a1^b1,b=b1</code> </td>
</tr>
<tr>
<td align="center"><code>b=a1^b1^b1</code> </td>
<td align="center"> <code>b=a^b</code> </td>
<td align="center"> <code>a=a1^b1,b=a1</code> </td>
</tr>
<tr>
<td align="center"><code>a=b1^a1^a1</code> </td>
<td align="center"> <code>a=a^b</code> </td>
<td align="center"> <code>a=b1,b=a1</code> </td>
</tr>
</tbody>
</table>


<!-- more -->


<h3>二进制补码运算公式：</h3>

<p><code>cpp
-x = ~x + 1 = ~(x-1)
~x = -x-1
-(~x) = x+1
~(-x) = x-1
x+y = x - ~y - 1 = (x |y)+(x&amp;y)
x-y = x + ~y + 1 = (x |~y)-(~x&amp;y)
x^y = (x |y)-(x&amp;y)
x |y = (x&amp;~y)+y
x&amp;y = (~x |y)-~x
x==y:    ~(x-y |y-x)
x!=y:    x-y |y-x
x &lt; y:    (x-y)^((x^y)&amp;((x-y)^x))
x &lt;=y:    (x |~y)&amp;((x^y) |~(y-x))
x &lt; y:    (~x&amp;y) |((~x |y)&amp;(x-y))//无符号x,y比较
x &lt;=y:    (~x |y)&amp;((x^y) |~(y-x))//无符号x,y比较
</code></p>

<h3>应用举例</h3>

<ul>
<li>判断int型变量a是奇数还是偶数
  <em>a&amp;1  = 0 偶数</em>
  <em>a&amp;1 =  1 奇数</em></li>
<li>取int型变量a的第k位 (k=0,1,2……sizeof(int))，即a>>k&amp;1</li>
<li>将int型变量a的第k位清0，即a=a&amp;~(1 &lt; &lt;k)</li>
<li>将int型变量a的第k位置1， 即a=a |(1 &lt; &lt;k)</li>
<li>int型变量循环左移k次，即a=a &lt; <k |a>>16-k  (设sizeof(int)=16)</li>
<li>int型变量a循环右移k次，即a=a>>k |a &lt; &lt;16-k  (设sizeof(int)=16)</li>
<li>整数的平均值</li>
<li>对于两个整数x,y，如果用 (x+y)/2 求平均值，会产生溢出，因为 x+y 可能会大于INT_MAX，但是我们知道它们的平均值是肯定不会溢出的，我们用如下算法：</li>
</ul>


<p>``` cpp
int average(int x, int y)  //返回X,Y 的平均值
{</p>

<pre><code>return (x&amp;y)+((x^y)&gt;&gt;1); 
</code></pre>

<p>}
```</p>

<ul>
<li>判断一个整数是不是2的幂,对于一个数 x >= 0，判断他是不是2的幂</li>
</ul>


<p>``` cpp
boolean power2(int x)
{</p>

<pre><code>return ((x&amp;(x-1))==0)&amp;&amp;(x!=0)； 
</code></pre>

<p>}
```
* 不用temp交换两个整数</p>

<p>``` cpp
void swcap(int x , int y)
{</p>

<pre><code>x ^= y; 
y ^= x; 
x ^= y; 
</code></pre>

<p>}
<code>
* 计算绝对值
</code> cpp
int abs( int x )
{</p>

<pre><code>int y ; 
y = x &gt;&gt; 31 ; 
return (x^y)-y ;        //or: (x+y)^y 
</code></pre>

<p>}
```</p>

<ul>
<li>取模运算转化成位运算 (在不产生溢出的情况下)

<pre><code>  a % (2^n) 等价于 a &amp; (2^n - 1)
</code></pre></li>
<li>乘法运算转化成位运算 (在不产生溢出的情况下)

<pre><code>  a * (2^n) 等价于 a &lt; &lt; n
</code></pre></li>
<li>除法运算转化成位运算 (在不产生溢出的情况下)

<pre><code>  a / (2^n) 等价于 a&gt;&gt; n
  例: 12/8 == 12&gt;&gt;3 
</code></pre></li>
<li><code>a % 2</code> 等价于 <code>a &amp; 1</code></li>
<li><code>x= a ^ b ^ x;</code> 等价于

<pre><code>  if (x == a) x= b; 
  else x= a;
</code></pre></li>
<li>x 的 相反数 表示为 (~x+1)</li>
</ul>


<h3>实例</h3>

<table>
<thead>
<tr>
<th align="center">功能 </th>
<th align="center"> 示例  </th>
<th align="center"> 位运算 </th>
</tr>
</thead>
<tbody>
<tr>
<td align="center">去掉最后一位      </td>
<td align="center"> (101101->10110)          </td>
<td align="center"> x >> 1 </td>
</tr>
<tr>
<td align="center">在最后加一个0        </td>
<td align="center"> (101101->1011010)        </td>
<td align="center"> x &lt; &lt; 1 </td>
</tr>
<tr>
<td align="center">在最后加一个1        </td>
<td align="center"> (101101->1011011)        </td>
<td align="center"> x &lt; &lt; 1+1 </td>
</tr>
<tr>
<td align="center">把最后一位变成1      </td>
<td align="center"> (101100->101101)          </td>
<td align="center"> x | 1 </td>
</tr>
<tr>
<td align="center">把最后一位变成0      </td>
<td align="center"> (101101->101100)          </td>
<td align="center"> x | 1-1 </td>
</tr>
<tr>
<td align="center">最后一位取反          </td>
<td align="center"> (101101->101100)          </td>
<td align="center"> x ^ 1 </td>
</tr>
<tr>
<td align="center">把右数第k位变成1      </td>
<td align="center"> (101001->101101,k=3)      </td>
<td align="center"> x | (1 &lt; &lt; (k-1)) </td>
</tr>
<tr>
<td align="center">把右数第k位变成0      </td>
<td align="center"> (101101->101001,k=3)      </td>
<td align="center"> x &amp; ~ (1 &lt; &lt; (k-1)) </td>
</tr>
<tr>
<td align="center">右数第k位取反        </td>
<td align="center"> (101001->101101,k=3)      </td>
<td align="center"> x ^ (1 &lt; &lt; (k-1)) </td>
</tr>
<tr>
<td align="center">取末三位              </td>
<td align="center"> (1101101->101)            </td>
<td align="center"> x &amp; 7 </td>
</tr>
<tr>
<td align="center">取末k位              </td>
<td align="center"> (1101101->1101,k=5)      </td>
<td align="center"> x &amp; ((1 &lt; &lt; k)-1) </td>
</tr>
<tr>
<td align="center">取右数第k位          </td>
<td align="center"> (1101101->1,k=4)          </td>
<td align="center"> x >> (k-1) &amp; 1 </td>
</tr>
<tr>
<td align="center">把末k位变成1          </td>
<td align="center"> (101001->101111,k=4)      </td>
<td align="center"> x | (1 &lt; &lt; k-1) </td>
</tr>
<tr>
<td align="center">末k位取反            </td>
<td align="center"> (101001->100110,k=4)      </td>
<td align="center"> x ^ (1 &lt; &lt; k-1) </td>
</tr>
<tr>
<td align="center">把右边连续的1变成0    </td>
<td align="center"> (100101111->100100000)    </td>
<td align="center"> x &amp; (x+1) </td>
</tr>
<tr>
<td align="center">把右起第一个0变成1    </td>
<td align="center"> (100101111->100111111)    </td>
<td align="center"> x | (x+1) </td>
</tr>
<tr>
<td align="center">把右边连续的0变成1    </td>
<td align="center"> (11011000->11011111)      </td>
<td align="center"> x | (x-1) </td>
</tr>
<tr>
<td align="center">取右边连续的1        </td>
<td align="center"> (100101111->1111)        </td>
<td align="center"> (x ^ (x+1)) >> 1 </td>
</tr>
<tr>
<td align="center">去掉右起第一个1的左边 </td>
<td align="center"> (100101000->1000)        </td>
<td align="center"> x &amp; (x ^ (x-1)) </td>
</tr>
</tbody>
</table>


<ul>
<li>判断奇数 (x&amp;1)==1</li>
<li><p>判断偶数 (x&amp;1)==0</p></li>
<li><p>例如求从x位（高）到y位（低）间共有多少个1*</p></li>
</ul>


<p>``` cpp
public static int FindChessNum(int x, int y, ushort k)
{</p>

<pre><code>int re = 0; 
for (int i = y; i &lt;= x; i++) 
{ 
    re += ((k &gt;&gt; (i - 1)) &amp; 1); 
} 
return re; 
</code></pre>

<p>}
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[SQL学习笔记]]></title>
    <link href="http://lhyqy5.github.com/blog/2012/05/31/sql-study-note/"/>
    <updated>2012-05-31T10:50:00+08:00</updated>
    <id>http://lhyqy5.github.com/blog/2012/05/31/sql-study-note</id>
    <content type="html"><![CDATA[<h3>怎样能把执行结果后的存储过程作为表</h3>

<h4>存储过程返回的行集结构可预知那么先建临时表再 insert 临时表 exec 存储过程。</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">create</span>   <span class="k">table</span>   <span class="o">#</span><span class="k">table</span><span class="p">(</span><span class="n">columns</span>   <span class="n">types</span>   <span class="p">.....)</span><span class="c1">--声明一个临时表 &lt;br/&gt;</span>
</span><span class='line'><span class="k">insert</span>   <span class="k">into</span>   <span class="o">#</span><span class="k">table</span>   <span class="k">exec</span>   <span class="n">dbo</span><span class="p">.</span><span class="n">yourStoredProcedure</span><span class="c1">--用你的存储过程向临时表添加记录 &lt;br/&gt;</span>
</span><span class='line'><span class="k">select</span>   <span class="o">#</span><span class="k">table</span>   <span class="c1">--使用你的临时表&lt;br/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>如果不可预知返回的结构，那么用openrowset之类语句。</h4>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="c1">--1调用存储过程</span>
</span><span class='line'><span class="k">exec</span> <span class="err">存储过程名</span> <span class="err">参数</span>
</span><span class='line'><span class="c1">--2当表使用</span>
</span><span class='line'><span class="k">select</span> <span class="n">a</span><span class="p">.</span><span class="o">&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="p">,</span><span class="n">b</span><span class="p">.</span><span class="o">&lt;/</span><span class="n">em</span><span class="o">&gt;</span> <span class="k">from</span> <span class="n">tb</span> <span class="n">b</span> <span class="k">inner</span> <span class="k">join</span> <span class="p">(</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="n">openrowset</span><span class="p">(</span><span class="s1">&#39;sqloledb&#39;</span><span class="p">,</span><span class="s1">&#39;ip/server&#39;</span><span class="p">;</span><span class="s1">&#39;sa&#39;</span><span class="p">;</span><span class="s1">&#39;pwd&#39;</span><span class="p">,</span><span class="s1">&#39;exec 库.dbo.存储过程&#39;</span><span class="p">))</span><span class="n">a</span>
</span><span class='line'><span class="k">on</span> <span class="n">a</span><span class="p">.</span><span class="err">条件</span><span class="o">=</span><span class="n">b</span><span class="p">.</span><span class="err">条件</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>SQL Server：表变量的声明和赋值</h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">DECLARE</span> <span class="o">@</span><span class="n">tempTable</span> <span class="k">TABLE</span> <span class="p">(</span><span class="n">strVal</span> <span class="nb">int</span><span class="p">);</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">INSERT</span> <span class="k">INTO</span> <span class="o">@</span><span class="n">tempTable</span>
</span><span class='line'><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="n">EXAMPLE_TABLE</span><span class="p">;</span> <span class="c1">--与@tempTable表结构一致&lt;/p&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">SELECT</span> <span class="o">*</span> <span class="k">FROM</span> <span class="o">@</span><span class="n">tempTable</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<!--more-->


<h3>公用表表达式(CTE)</h3>

<h4>公用表表达式(CTE)的定义</h4>

<p>公用表达式的定义非常简单，只包含三部分：</p>

<ul>
<li>公用表表达式的名字（在WITH之后）</li>
<li>所涉及的列名（可选）</li>
<li>一个SELECT语句(紧跟AS之后)</li>
</ul>


<p><div class='bogus-wrapper'><notextile><figure class='code'><figcaption><span>在MSDN中的原型  </span></figcaption>
 <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'>  <span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'><span class="k">WITH</span> <span class="n">expression_name</span> <span class="p">[</span> <span class="p">(</span> <span class="k">column_name</span> <span class="p">[,...</span><span class="n">n</span><span class="p">]</span> <span class="p">)</span> <span class="p">]</span>
</span><span class='line'><span class="k">AS</span>
</span><span class='line'><span class="p">(</span> <span class="n">CTE_query_definition</span> <span class="p">)</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<p>按照是否递归，可以将公用表（CTE）表达式分为递归公用表表达式和非递归公用表表达式.</p>

<ul>
<li>非递归公用表表达式（CTE）是查询结果仅仅一次性返回一个结果集用于外部查询调用。并不在其定义的语句中调用其自身的CTE <br/>
非递归公用表表达式（CTE）的使用方式和视图以及子查询一致</li>
<li>递归公用表表达式很像派生表（Derived Tables ），指的是在CTE内的语句中调用其自身的CTE.与派生表不同的是，CTE可以在一次定义多次进行派生递归.对于递归的概念，是指一个函数或是过程直接或者间接的调用其自身</li>
</ul>


<h3>#temp 局部变量表，##全局变量表，@temp临时表  <a href="http://topic.csdn.net/u/20071009/07/eeace098-482a-488a-a248-4501889235ac.html">[原文]</a></h3>

<p><div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="k">declare</span> <span class="o">@</span><span class="n">temp</span> <span class="k">table</span><span class="p">(</span><span class="n">id</span> <span class="nb">int</span> <span class="k">identity</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span><span class="mi">1</span><span class="p">),</span><span class="n">Name</span> <span class="nb">varchar</span><span class="p">(</span><span class="mi">10</span><span class="p">))</span>
</span><span class='line'><span class="k">insert</span> <span class="o">@</span><span class="n">temp</span> <span class="k">select</span> <span class="s1">&#39;aa&#39;</span>
</span><span class='line'><span class="k">insert</span> <span class="o">@</span><span class="n">temp</span> <span class="k">select</span> <span class="s1">&#39;bb&#39;</span>
</span><span class='line'><span class="k">select</span> <span class="o">*</span> <span class="k">from</span> <span class="o">@</span><span class="n">temp</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h3>Transact-SQL 参考</h3>

<h4>table</h4>

<p>一种特殊的数据类型，用于存储结果集以供后续处理。该数据类型主要用于临时存储一组行，这些行将作为表值函数的结果集返回
。</p>

<h4>语法</h4>

<p>说明 使用 DECLARE @local_variable 声明 <code>table</code>类型的变量。
<div class='bogus-wrapper'><notextile><figure class='code'> <div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
</pre></td><td class='code'><pre><code class='sql'><span class='line'><span class="n">table_type_definition</span> <span class="p">::</span><span class="o">=</span>
</span><span class='line'>  <span class="k">TABLE</span> <span class="p">(</span> <span class="err">{</span> <span class="n">column_definition</span> <span class="o">|</span> <span class="n">table_constraint</span> <span class="err">}</span> <span class="p">[</span> <span class="p">,...</span><span class="n">n</span> <span class="p">]</span> <span class="p">)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">column_definition</span> <span class="p">::</span><span class="o">=</span>
</span><span class='line'>  <span class="k">column_name</span> <span class="n">scalar_data_type</span>
</span><span class='line'>  <span class="p">[</span> <span class="k">COLLATE</span> <span class="n">collation_definition</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">[</span> <span class="p">[</span> <span class="k">DEFAULT</span> <span class="n">constant_expression</span> <span class="p">]</span> <span class="o">|</span> <span class="k">IDENTITY</span> <span class="p">[</span> <span class="p">(</span> <span class="n">seed</span> <span class="p">,</span> <span class="k">increment</span> <span class="p">)</span> <span class="p">]</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">ROWGUIDCOL</span> <span class="p">]</span>
</span><span class='line'>  <span class="p">[</span> <span class="n">column_constraint</span> <span class="p">]</span> <span class="p">[</span> <span class="p">...</span><span class="n">n</span> <span class="p">]</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">column_constraint</span> <span class="p">::</span><span class="o">=</span>
</span><span class='line'>  <span class="err">{</span> <span class="p">[</span> <span class="k">NULL</span> <span class="o">|</span> <span class="k">NOT</span> <span class="k">NULL</span> <span class="p">]</span>
</span><span class='line'>  <span class="o">|</span> <span class="p">[</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="o">|</span> <span class="k">UNIQUE</span> <span class="p">]</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">logical_expression</span> <span class="p">)</span>
</span><span class='line'>  <span class="err">}</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>
</span><span class='line'>
</span><span class='line'><span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">table_constraint</span> <span class="p">::</span><span class="o">=&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="err">{</span> <span class="err">{</span> <span class="k">PRIMARY</span> <span class="k">KEY</span> <span class="o">|</span> <span class="k">UNIQUE</span> <span class="err">}</span> <span class="p">(</span> <span class="k">column_name</span> <span class="p">[</span> <span class="p">,...</span><span class="n">n</span> <span class="p">]</span> <span class="p">)</span>
</span><span class='line'>  <span class="o">|</span> <span class="k">CHECK</span> <span class="p">(</span> <span class="n">search_condition</span> <span class="p">)</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span><span class='line'>  <span class="err">}</span><span class="o">&lt;</span><span class="n">br</span><span class="o">/&gt;</span>
</span></code></pre></td></tr></table></div></figure></notextile></div></p>

<h4>参数</h4>

<p><em>table_type_definition</em></p>

<p>与<code>CREATE TABLE</code> 中定义表所用的信息子集相同的信息子集。表声明包括列定义、名称、数据类型和约束。允许的约束类型仅为 <code>PRIMARY KEY</code>、<code>UNIQUE KEY</code> 和 <code>NULL</code>。
有关语法的更多信息，请参见 <code>CREATE TABLE</code>、<code>CREATE FUNCTION</code> 和 <code>DECLARE @local_variable</code>。</p>

<p><em>collation_definition</em></p>

<p>是由 Microsoft® Windows™ 区域设置和比较风格、Windows 区域设置和二进制表示法或 Microsoft SQL Server™ 排序规则组成的列的排序规则。</p>

<h4>注释</h4>

<p>可将函数和变量声明为 <code>table</code> 类型。<code>table</code> 变量可用于函数、存储过程和批处理中。</p>

<p>尽可能使用表变量而不使用临时表。<code>table</code> 变量有以下优点：</p>

<ul>
<li>table 变量的行为类似于局部变量，有明确定义的作用域。该作用域为声明该变量的函数、存储过程或批处理。</li>
<li>在其作用域内，<code>table</code> 变量可像常规表那样使用。该变量可应用于 <code>SELECT</code>、<code>INSERT</code>、<code>UPDATE</code> 和 <code>DELETE</code> 语句中用到表或表的表达式的地方。但是，<code>table</code> 不能用在下列语句中：
<code>sql
INSERT INTO table_variable EXEC [存储过程]。
SELECT select_list INTO table_variable [语句]。
</code></li>
<li>在定义 table 变量的函数、存储过程或批处理结束时，自动清除 table 变量。</li>
<li>在存储过程中使用表变量与使用临时表相比，减少了存储过程的重新编译量。</li>
<li>涉及表变量的事务只在表变量更新期间存在。这样就减少了表变量对锁定和记录资源的需求。</li>
<li>不支持在表变量之间进行赋值操作。另外，由于表变量作用域有限，并且不是持久数据库的一部分，因而不受事务回滚的影响。</li>
</ul>


<h3>SomeTip</h3>

<h4>计算字段</h4>

<p>``` sql
SELECT *,AlterFlag = case when l.RegTime is null or d.DT_LastModifTime > l.RegTime then 1 else 0 end
FROM EIP_DT_Message d
LEFT JOIN EIP_DT_Person p ON p.Person_DT_Id=d.DT_Id AND p.Person_Type=0
LEFT JOIN EIP_DT_Log l ON l.DT_ID=d.DT_Id AND l.ActorSyncID='{0}' AND IsNew=1
WHERE d.DT_ID IN (</p>

<pre><code>    SELECT DISTINCT(Person_DT_Id) FROM EIP_DT_Person WHERE (Person_SyncId='{0}') 
    union
    SELECT DISTINCT(Person_DT_Id) FROM EIP_DT_Person WHERE (Person_LoginName IN ({1}))
)
</code></pre>

<p>```</p>

<h3>SQL复制表的几种方法：</h3>

<h4>SQL复制整张表</h4>

<p><code>sql
select * into NewTableName from OldTableName
</code></p>

<h4>只复制列名而不要内容</h4>

<p><code>sql
select * into NewTableName from OldTableName where 1=0
</code></p>

<h4>表间数据复制</h4>

<p><code>sql
insert into Table1(zt) select titile from Table2
</code></p>
]]></content>
  </entry>
  
</feed>
